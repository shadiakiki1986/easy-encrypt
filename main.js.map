{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/forge.service.ts","webpack:///./src/app/key-detail/key-detail.component.css","webpack:///./src/app/key-detail/key-detail.component.html","webpack:///./src/app/key-detail/key-detail.component.ts","webpack:///./src/app/key.service.ts","webpack:///./src/app/key.ts","webpack:///./src/app/keys/keys.component.css","webpack:///./src/app/keys/keys.component.html","webpack:///./src/app/keys/keys.component.ts","webpack:///./src/app/mock-keys.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///crypto (ignored)"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to {{ title }}!\\n  </h1>\\n</div>\\n<h2>encrypt a message using a public key</h2>\\n<p>\\n  Say you want to encrypt a short text message and send it to Mr X.\\n  easy-encrypt allows you to encrypt it using Mr X's public key.\\n  Only Mr X can decrypt the message using his private key.\\n</p>\\n\\n<app-keys></app-keys>\\n\\n<ul>\\n  <li>\\n    <a target=\\\"_blank\\\" rel=\\\"noopener\\\" href=\\\"https://github.com/shadiakiki1986/easy-encrypt\\\">Source code</a>\\n  </li>\\n</ul>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'easy-encrypt';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms'; \n\nimport { AppComponent } from './app.component';\nimport { KeysComponent } from './keys/keys.component';\nimport { KeyDetailComponent } from './key-detail/key-detail.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    KeysComponent,\n    KeyDetailComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport * as forge from 'node-forge'\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ForgeService {\n\n  constructor() { }\n\n  encrypt(pem: string, message: string): Observable<string> {\n    // https://github.com/digitalbazaar/forge#rsa\n    if(!message) return of(\"\");\n    try {\n      var publicKey = forge.pki.publicKeyFromPem(pem);\n      var encrypted = publicKey.encrypt(message);\n      return of(forge.util.encode64(encrypted));\n    } catch(e) {\n      return of(e.message);\n    }\n  }\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"key\\\">\\n  <div>\\n    <label>Name:\\n      <input [(ngModel)]=\\\"key.name\\\" placeholder=\\\"name\\\" size=100>\\n    </label>\\n  </div>\\n  <div>\\n    <label>Public key (in PEM format <a href=\\\"https://superuser.com/a/576558/642842\\\">ref</a>):\\n      <textarea [(ngModel)]=\\\"key.public_key\\\" placeholder=\\\"public_key\\\" cols=\\\"100\\\" rows=\\\"20\\\">\\n      </textarea>\\n    </label>\\n  </div>\\n\\n  <div>\\n    <h2>Enter message to encrypt</h2>\\n    <label>Message:\\n      <textarea [(ngModel)]=\\\"message\\\" placeholder=\\\"message\\\" cols=\\\"100\\\" rows=\\\"20\\\" (ngModelChange)=\\\"onEncrypt()\\\">\\n      </textarea>\\n    </label>\\n\\n    <div>Encrypted:\\n    {{encrypted}}\\n    </div>\\n\\n  </div>\\n\\n</div>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Key } from '../key';\nimport { ForgeService } from '../forge.service';\n\n@Component({\n  selector: 'app-key-detail',\n  templateUrl: './key-detail.component.html',\n  styleUrls: ['./key-detail.component.css']\n})\nexport class KeyDetailComponent implements OnInit {\n\n  @Input() key: Key;\n\n  message: string;\n  encrypted: string;\n\n  constructor(private forgeService: ForgeService) { }\n\n  ngOnInit() {\n  }\n\n  onEncrypt() {\n     return this.forgeService.encrypt(this.key.public_key, this.message)\n                .subscribe(encrypted => this.encrypted = encrypted);\n     ;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Key } from './key';\nimport { KEYS } from './mock-keys';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class KeyService {\n\n  constructor() { }\n\n  getKeys(): Key[] {\n    return KEYS;\n  }\n}\n","export class Key {\n  id: number;\n  name: string;\n  public_key: string;\n}\n","module.exports = \"/* KeysComponent's private CSS styles */\\n.selected {\\n  background-color: #CFD8DC !important;\\n  color: white;\\n}\\n.keys {\\n  margin: 0 0 2em 0;\\n  list-style-type: none;\\n  padding: 0;\\n  width: 15em;\\n}\\n.keys li {\\n  cursor: pointer;\\n  position: relative;\\n  left: 0;\\n  background-color: #EEE;\\n  margin: .5em;\\n  padding: .3em 0;\\n  height: 1.6em;\\n  border-radius: 4px;\\n}\\n.keys li.selected:hover {\\n  background-color: #BBD8DC !important;\\n  color: white;\\n}\\n.keys li:hover {\\n  color: #607D8B;\\n  background-color: #DDD;\\n  left: .1em;\\n}\\n.keys .text {\\n  position: relative;\\n  top: -3px;\\n}\\n.keys .badge {\\n  display: inline-block;\\n  font-size: small;\\n  color: white;\\n  padding: 0.8em 0.7em 0 0.7em;\\n  background-color: #607D8B;\\n  line-height: 1em;\\n  position: relative;\\n  left: -1px;\\n  top: -4px;\\n  height: 1.8em;\\n  margin-right: .8em;\\n  border-radius: 4px 0 0 4px;\\n}\\n\"","module.exports = \"<h2>Click a key</h2>\\n<ul>\\n\\t<li *ngFor=\\\"let key of keys\\\" (click)=\\\"onSelect(key)\\\" [class.selected]=\\\"key === selectedKey\\\">\\n\\t\\t<h2>{{ key.name }}</h2>\\n\\t</li>\\n</ul>\\n\\n\\n<app-key-detail [key]=\\\"selectedKey\\\"></app-key-detail>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Key } from '../key';\nimport { KeyService } from '../key.service';\n\n@Component({\n  selector: 'app-keys',\n  templateUrl: './keys.component.html',\n  styleUrls: ['./keys.component.css']\n})\nexport class KeysComponent implements OnInit {\n\n  keys: Key[];\n\n  constructor(private keyService: KeyService) { }\n\n  getKeys(): void {\n    this.keys = this.keyService.getKeys();\n  }\n\n  ngOnInit() {\n    this.getKeys();\n  }\n\n\tselectedKey: Key;\n\n\tonSelect(key: Key): void {\n\t\tthis.selectedKey = key;\n\t}\n\n}\n","import { Key } from './key';\n\nexport const KEYS: Key[] = [\n  {\n    id: 1,\n    name: 'shadiakiki1986@gmail.com toshiba laptop',\n    public_key: `-----BEGIN PUBLIC KEY-----\n    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuyPap8XronS4k48OC92i\n    GuLk8vr3vJy9iOyTVqsAmrV+7QLIY099kDo5ZzyB8OezmUAl3EzkSmh8QzM0DwIF\n    0NeW77H7xY33JS5bDHfnd2myAn+CGI+feEWUUUiygwDC47+CPqIlL1jOVFucIFhv\n    K8fN8QexH/wW8DE1P50GL8BBxqVo/qbNflGzlA58i0dL3VvnALQHDjzKCHc5jIa4\n    UoYIJtmtAQTJ7tW39jqbnZum+edjC2VBt4tQhFncNy/U0o6XT/IhwIdS6+2VoTnz\n    Oh+lKwLZnTnRWgIOLciiN4K9KhZoqFxj4Mjodl7Tc/6JjQpFtQMPRLqpGjX16j1a\n    fQIDAQAB\n    -----END PUBLIC KEY-----`,\n  },\n  {\n    id: 2,\n    name: 'JP',\n    public_key: \"\"\n  },\n\n]\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","/* (ignored) */"],"sourceRoot":""}